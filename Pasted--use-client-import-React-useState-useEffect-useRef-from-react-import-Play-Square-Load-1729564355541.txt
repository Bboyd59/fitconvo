'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Play, Square, Loader2 } from "lucide-react"
import { useConversation, Role } from '@11labs/react'
import { Application } from '@splinetool/runtime'

interface Message {
  message: string;
  source: Role;
}

export default function Page() {
  const [isConversationActive, setIsConversationActive] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [transcript, setTranscript] = useState('')
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const splineAppRef = useRef<Application | null>(null)

  const conversation = useConversation({
    onConnect: () => console.log('Connected to ElevenLabs AI'),
    onDisconnect: () => console.log('Disconnected from ElevenLabs AI'),
    onMessage: (message: Message) => {
      setTranscript(message.message)
    },
    onError: (error) => console.error('ElevenLabs AI Error:', error),
  })

  useEffect(() => {
    if (canvasRef.current) {
      const app = new Application(canvasRef.current)
      splineAppRef.current = app
      app.load('https://prod.spline.design/S8IqwXrUp45K4FX7/scene.splinecode')
        .then(() => {
          console.log('Spline scene loaded')
          updateObjectsVisibility(false)
        })
    }

    return () => {
      conversation.endSession()
    }
  }, [])

  useEffect(() => {
    updateObjectsVisibility(conversation.isSpeaking)
  }, [conversation.isSpeaking])

  const toggleConversation = () => {
    if (!isConversationActive) {
      setIsLoading(true)
      navigator.mediaDevices.getUserMedia({ audio: true })
        .then(() => {
          conversation.startSession({ agentId: 'k3Y3836coPlICNgueuk0' }) // Replace with your actual agent ID
          setIsConversationActive(true)
          setIsLoading(false)
        })
        .catch((error) => {
          console.error('Error starting conversation:', error)
          setIsLoading(false)
        })
    } else {
      conversation.endSession()
      setIsConversationActive(false)
    }
  }

  const updateObjectsVisibility = (isVisible: boolean) => {
    if (splineAppRef.current) {
      const objectIds = [
        '22a68f4b-d178-40b2-8def-4c1f876c2ae9', // Waveform1
        'c225b50c-a9dc-42b9-b84d-cd09dc453f5e'  // Waveform2
      ]

      objectIds.forEach(id => {
        const object = splineAppRef.current!.findObjectById(id)
        if (object) {
          object.visible = isVisible
        }
      })

      splineAppRef.current.setVariable('isSpeaking', isVisible)
    }
  }

  return (
    <main className="h-screen w-full bg-black flex flex-col items-center justify-center relative">
      {/* Spline Animation */}
      <canvas ref={canvasRef} className="absolute inset-0 z-0" />

      {/* Top Bar */}
      <div className="absolute top-4 left-0 right-0 flex justify-center items-center space-x-4 z-10">
        {/* Improved Conversation Toggle Button */}
        <button
          onClick={toggleConversation}
          disabled={isLoading}
          className={`w-16 h-16 rounded-full flex items-center justify-center transition-all duration-300 ease-in-out ${
            isConversationActive
              ? 'bg-red-500 text-white hover:bg-red-600'
              : 'bg-green-500 text-white hover:bg-green-600'
          }`}
        >
          {isLoading ? (
            <Loader2 className="w-6 h-6 animate-spin" />
          ) : isConversationActive ? (
            <Square className="w-6 h-6" />
          ) : (
            <Play className="w-6 h-6" />
          )}
        </button>

        {/* Connection Status */}
        {/* <div className="text-white">
          Status: {conversation.status}
        </div> */}
      </div>

      {/* Chat Transcript */}
      <div 
        className={`absolute bottom-16 left-0 right-0 text-center transition-opacity duration-500 z-10 ${
          conversation.isSpeaking || transcript ? 'opacity-100' : 'opacity-0'
        }`}
      >
        <div className="inline-block bg-gray-800 text-white px-4 py-2 rounded-lg shadow-md">
          {transcript}
        </div>
      </div>
    </main>
  )
}
